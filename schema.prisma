generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_DIRECT_URL") // uses a direct connection // not needed for prisma postgresql database
}

// Dumper

enum Status {
  UNEXPORTED
  UPDATED_RECENTLY
  EXPORTED
}

model Categories {
  id         Int          @id @default(autoincrement())
  name       String
  News       News[]
  StaticNews StaticNews[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")

  @@unique([name, userId])
  @@map("categories")
}

model News {
  id         Int        @id @default(autoincrement())
  title      String
  url        String
  quote      String?
  status     Status     @default(UNEXPORTED)
  Category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int        @map("category_id")
  userId     String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("news")
}

model Contents {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  quote     String?
  status    Status   @default(UNEXPORTED)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contents")
}

model Images {
  id        String    @id @default(uuid(7))
  status    Status    @default(UNEXPORTED)
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  contentType String @map("content_type") // e.g.: image/jpeg, image/png
  fileSize    Int?   @map("file_size") // byte
  width       Int? // pixel
  height      Int? // pixel

  tags        String[] @default([])
  description String?

  @@map("images")
}

// Viewer

model StaticNews {
  id    Int     @default(autoincrement())
  url   String  @id @unique
  title String
  quote String?

  ogImageUrl    String? @map("og_image_url")
  ogTitle       String? @map("og_title")
  ogDescription String? @map("og_description")

  Category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int        @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("st_news")
}

model StaticContents {
  title           String @id @unique
  markdown        String
  uint8ArrayImage Bytes // only a few KBs so not much performance loss

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("st_contents")
}

model StaticBooks {
  ISBN  String @id @unique @map("isbn")
  title String

  googleTitle       String   @map("google_title")
  googleSubTitle    String   @map("google_subtitle")
  googleAuthors     String[] @map("google_authors")
  googleDescription String   @map("google_description")
  googleImgSrc      String   @map("google_img_src")
  googleHref        String   @map("google_href")

  markdown        String
  uint8ArrayImage Bytes // only a few KBs so not much performance loss

  rating Int? // 1-5
  tags   String[] @default([])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("st_books")
}

model StaticImages {
  id String @id @default(uuid(7))

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contentType String @map("content_type") // e.g.: image/jpeg, image/png
  fileSize    Int?   @map("file_size") // byte
  width       Int? // pixel
  height      Int? // pixel

  tags        String[] @default([])
  description String?

  @@map("st_images")
}
